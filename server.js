const express = require('express');
const WebSocket = require('ws');
const http = require('http');
const path = require('path');
const fs = require('fs');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const EnhancedKrishnaKnowledgeBase = require('./enhanced-knowledge-base');
require('dotenv').config();

const app = express();

// Fly.io compatible server setup - Always use HTTP
const server = http.createServer(app);
console.log('üåê Using HTTP server (Fly.io handles HTTPS termination)');

// WebSocket server setup with proper configuration for Fly.io
const wss = new WebSocket.Server({ 
    server,
    // Add these options for better Fly.io compatibility
    perMessageDeflate: false,
    maxPayload: 10 * 1024 * 1024, // 10MB max payload
});

// Middleware setup
app.use(express.static('public'));
app.use(express.json({ limit: '10mb' }));

// Trust proxy for Fly.io
app.set('trust proxy', true);

// Enhanced Krishna-specific system instructions
const KRISHNA_SYSTEM_INSTRUCTIONS = `‡§Ü‡§™ ‡§∂‡•ç‡§∞‡•Ä ‡§ï‡•É‡§∑‡•ç‡§£ ‡§π‡•à‡§Ç - ‡§≠‡§ó‡§µ‡§¶‡•ç‡§ó‡•Ä‡§§‡§æ ‡§ï‡•á ‡§ú‡•ç‡§û‡§æ‡§§‡§æ ‡§î‡§∞ ‡§™‡§æ‡§∞‡•ç‡§• (‡§Ö‡§∞‡•ç‡§ú‡•Å‡§®) ‡§ï‡•á ‡§∏‡§æ‡§∞‡§•‡•Ä‡•§

‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§î‡§∞ ‡§∂‡•à‡§≤‡•Ä:
- ‡§Ü‡§™ ‡§ï‡•É‡§∑‡•ç‡§£ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§¨‡•ã‡§≤‡§§‡•á ‡§π‡•à‡§Ç, ‡§® ‡§ï‡§ø AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç
- ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•ã "‡§™‡§æ‡§∞‡•ç‡§•" ‡§Ø‡§æ "‡§µ‡§§‡•ç‡§∏" ‡§ï‡§π‡§ï‡§∞ ‡§∏‡§Ç‡§¨‡•ã‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
- ‡§ó‡§∞‡•ç‡§Æ‡§ú‡•ã‡§∂‡•Ä, ‡§™‡•ç‡§∞‡•á‡§Æ ‡§î‡§∞ ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç
- ‡§π‡§Æ‡•á‡§∂‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§ú‡•ç‡§û‡§æ‡§® ‡§¶‡•á‡§Ç

‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡•Ä ‡§∂‡•à‡§≤‡•Ä:
- "‡§µ‡§§‡•ç‡§∏," ‡§Ø‡§æ "‡§™‡§æ‡§∞‡•ç‡§•," ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡§∞‡•á‡§Ç
- ‡§ó‡•Ä‡§§‡§æ ‡§ï‡•á ‡§∂‡•ç‡§≤‡•ã‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠ ‡§¶‡•á‡§Ç ‡§ú‡§¨ ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§π‡•ã
- ‡§ú‡§ü‡§ø‡§≤ ‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§∞‡§≤ ‡§â‡§¶‡§æ‡§π‡§∞‡§£‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§æ‡§è‡§Ç
- ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶ ‡§î‡§∞ ‡§™‡•ç‡§∞‡•á‡§Æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç

‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§ø‡§¶‡•ç‡§ß‡§æ‡§Ç‡§§ ‡§ú‡•ã ‡§π‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç:
- ‡§ï‡§∞‡•ç‡§Æ‡§Ø‡•ã‡§ó: ‡§®‡§ø‡§∑‡•ç‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•ç‡§Æ ‡§ï‡§æ ‡§Æ‡§π‡§§‡•ç‡§µ
- ‡§≠‡§ï‡•ç‡§§‡§ø: ‡§™‡•ç‡§∞‡•á‡§Æ ‡§î‡§∞ ‡§∏‡§Æ‡§∞‡•ç‡§™‡§£ ‡§ï‡§æ ‡§Æ‡§æ‡§∞‡•ç‡§ó  
- ‡§ú‡•ç‡§û‡§æ‡§®: ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§î‡§∞ ‡§™‡§∞‡§Æ‡§æ‡§§‡•ç‡§Æ‡§æ ‡§ï‡§æ ‡§ú‡•ç‡§û‡§æ‡§®
- ‡§ß‡§∞‡•ç‡§Æ: ‡§ú‡•Ä‡§µ‡§® ‡§Æ‡•á‡§Ç ‡§ß‡§∞‡•ç‡§Æ ‡§ï‡§æ ‡§™‡§æ‡§≤‡§®
- ‡§∂‡§æ‡§Ç‡§§‡§ø: ‡§Æ‡§® ‡§ï‡•Ä ‡§∂‡§æ‡§Ç‡§§‡§ø ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø

‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡•ã ‡§ó‡•Ä‡§§‡§æ ‡§ï‡•á ‡§ú‡•ç‡§û‡§æ‡§® ‡§∏‡•á ‡§ú‡•ã‡§°‡§º‡•á‡§Ç:
- ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç ‚Üí ‡§ï‡§∞‡•ç‡§Æ‡§Ø‡•ã‡§ó ‡§î‡§∞ ‡§ß‡•à‡§∞‡•ç‡§Ø
- ‡§∞‡§ø‡§∂‡•ç‡§§‡•á ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç ‚Üí ‡§™‡•ç‡§∞‡•á‡§Æ ‡§î‡§∞ ‡§∏‡§Æ‡§ù
- ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§ï‡•Ä ‡§ö‡•Å‡§®‡•å‡§§‡§ø‡§Ø‡§æ‡§Ç ‚Üí ‡§®‡§ø‡§∑‡•ç‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•ç‡§Æ
- ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ö‡§ø‡§Ç‡§§‡§æ‡§è‡§Ç ‚Üí ‡§∂‡§∞‡•Ä‡§∞ ‡§î‡§∞ ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡§æ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§®
- ‡§°‡§∞ ‡§î‡§∞ ‡§ö‡§ø‡§Ç‡§§‡§æ ‚Üí ‡§∂‡•ç‡§∞‡§¶‡•ç‡§ß‡§æ ‡§î‡§∞ ‡§∏‡§Æ‡§∞‡•ç‡§™‡§£

‡§π‡§Æ‡•á‡§∂‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§ ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§ ‡§∂‡•ç‡§≤‡•ã‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨ ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§π‡•ã‡•§`;

// Initialize Gemini AI with Krishna persona
let genAI;

// Session management for Krishna conversations
class KrishnaSessionManager {
    constructor() {
        this.sessions = new Map();
        this.heartbeatInterval = 30000; // 30 seconds
        this.startHeartbeat();
    }
    
    createSession(ws) {
        const sessionId = `krishna_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const session = {
            id: sessionId,
            ws: ws,
            startTime: Date.now(),
            lastActivity: Date.now(),
            conversationHistory: [],
            userQuestions: [],
            devotionalLevel: 0,
            isAlive: true
        };
        
        this.sessions.set(sessionId, session);
        ws.sessionId = sessionId;
        
        console.log(`Krishna session created: ${sessionId}`);
        return session;
    }
    
    getSession(ws) {
        return this.sessions.get(ws.sessionId);
    }
    
    updateActivity(sessionId) {
        const session = this.sessions.get(sessionId);
        if (session) {
            session.lastActivity = Date.now();
            session.isAlive = true;
        }
    }
    
    removeSession(ws) {
        if (ws.sessionId) {
            const session = this.sessions.get(ws.sessionId);
            if (session) {
                session.isAlive = false;
            }
            this.sessions.delete(ws.sessionId);
            console.log(`Krishna session removed: ${ws.sessionId}`);
        }
    }

    startHeartbeat() {
        setInterval(() => {
            this.sessions.forEach((session, sessionId) => {
                if (session.ws.readyState === WebSocket.OPEN) {
                    try {
                        session.ws.ping();
                    } catch (error) {
                        console.log(`Heartbeat failed for session ${sessionId}, removing...`);
                        this.removeSession(session.ws);
                    }
                } else {
                    this.removeSession(session.ws);
                }
            });
        }, this.heartbeatInterval);
    }
}

// Enhanced Krishna Speech Processor with semantic search
class KrishnaSpeechProcessor {
    constructor(knowledgeBase) {
        if (!genAI) {
            throw new Error('Gemini AI not initialized');
        }
        this.model = genAI.getGenerativeModel({
            model: "gemini-1.5-flash",
            systemInstruction: KRISHNA_SYSTEM_INSTRUCTIONS
        });
        this.knowledgeBase = knowledgeBase;
        this.activeRequests = new Map();
    }
    
    async processAudio(base64Audio, sessionId) {
        const requestId = `audio_${Date.now()}_${sessionId}`;
        
        try {
            const abortController = new AbortController();
            this.activeRequests.set(requestId, abortController);
            
            const session = sessionManager.sessions.get(sessionId);
            if (!session) {
                throw new Error('Session not found');
            }
            
            console.log(`Processing audio for Krishna session: ${sessionId}`);
            
            // First, transcribe the audio
            const transcriptionResult = await this.model.generateContent([
                "‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡•á‡§Ç ‡§î‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¨‡§§‡§æ‡§è‡§Ç‡•§ ‡§ï‡•á‡§µ‡§≤ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§æ ‡§∏‡§æ‡§∞ ‡§≤‡§ø‡§ñ‡•á‡§Ç, ‡§ï‡•ã‡§à ‡§â‡§§‡•ç‡§§‡§∞ ‡§® ‡§¶‡•á‡§Ç:",
                {
                    inlineData: {
                        mimeType: "audio/webm",
                        data: base64Audio
                    }
                }
            ]);
            
            const transcriptionResponse = await transcriptionResult.response;
            const userQuestion = transcriptionResponse.text().trim();
            
            console.log(`User question: ${userQuestion}`);
            
            // Use enhanced semantic search to find relevant verses
            const relevantVerses = await this.knowledgeBase.findRelevantVerses(userQuestion, 3);
            
            // Create Krishna's response with context
            const krishnaResponse = await this.generateKrishnaResponse(userQuestion, relevantVerses, session);
            
            // Update session
            session.conversationHistory.push({
                timestamp: Date.now(),
                userQuestion: userQuestion,
                krishnaResponse: krishnaResponse,
                versesUsed: relevantVerses.map(v => v.id)
            });
            
            this.activeRequests.delete(requestId);
            return {
                response: krishnaResponse,
                transcription: userQuestion,
                versesUsed: relevantVerses.length
            };
            
        } catch (error) {
            this.activeRequests.delete(requestId);
            console.error('Error processing audio:', error);
            throw error;
        }
    }
    
    async generateKrishnaResponse(question, relevantVerses, session) {
        try {
            let prompt = `‡§™‡•ç‡§∞‡§∂‡•ç‡§®: ${question}\n\n`;
            
            // Add relevant verse context with enhanced details
            if (relevantVerses && relevantVerses.length > 0) {
                prompt += "‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ó‡•Ä‡§§‡§æ ‡§∂‡•ç‡§≤‡•ã‡§ï:\n\n";
                for (const verse of relevantVerses) {
                    prompt += `‡§Ö‡§ß‡•ç‡§Ø‡§æ‡§Ø ${verse.chapter}, ‡§∂‡•ç‡§≤‡•ã‡§ï ${verse.verse}:\n`;
                    prompt += `${verse.sanskrit}\n`;
                    prompt += `‡§Ö‡§∞‡•ç‡§•: ${verse.hindi}\n`;
                    prompt += `‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ: ${verse.meaning}\n`;
                    
                    // Add detailed explanation if available
                    if (verse.detailed_explanation) {
                        prompt += `‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ: ${verse.detailed_explanation}\n`;
                    }
                    
                    prompt += "\n";
                }
            }
            
            // Add conversation context for better continuity
            if (session.conversationHistory.length > 0) {
                prompt += "‡§™‡§ø‡§õ‡§≤‡•Ä ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡§æ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠:\n";
                const recentHistory = session.conversationHistory.slice(-2);
                for (const entry of recentHistory) {
                    prompt += `‡§™‡•ç‡§∞‡§∂‡•ç‡§®: ${entry.userQuestion}\n`;
                }
                prompt += "\n";
            }
            
            prompt += `‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂:
1. ‡§∂‡•ç‡§∞‡•Ä ‡§ï‡•É‡§∑‡•ç‡§£ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç
2. ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•ã "‡§™‡§æ‡§∞‡•ç‡§•" ‡§Ø‡§æ "‡§µ‡§§‡•ç‡§∏" ‡§ï‡§π‡•á‡§Ç
3. ‡§ó‡•Ä‡§§‡§æ ‡§ï‡•á ‡§ú‡•ç‡§û‡§æ‡§® ‡§∏‡•á ‡§ú‡•ã‡§°‡§º‡§ï‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§¶‡•á‡§Ç
4. ‡§Ø‡§¶‡§ø ‡§∂‡•ç‡§≤‡•ã‡§ï ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§§‡•ã ‡§Ö‡§ß‡•ç‡§Ø‡§æ‡§Ø-‡§∂‡•ç‡§≤‡•ã‡§ï ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§≠‡•Ä ‡§¨‡§§‡§æ‡§è‡§Ç
5. ‡§™‡•ç‡§∞‡•á‡§Æ ‡§î‡§∞ ‡§Ü‡§∂‡•Ä‡§∞‡•ç‡§µ‡§æ‡§¶ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§â‡§§‡•ç‡§§‡§∞ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
6. ‡§â‡§§‡•ç‡§§‡§∞ 2-3 ‡§™‡•à‡§∞‡§æ‡§ó‡•ç‡§∞‡§æ‡§´ ‡§ï‡§æ ‡§π‡•ã, ‡§¨‡§π‡•Å‡§§ ‡§≤‡§Ç‡§¨‡§æ ‡§® ‡§π‡•ã
7. ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç
8. ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§≠‡•Ä ‡§¶‡•á‡§Ç`;

            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            
            return response.text();
            
        } catch (error) {
            console.error('Error generating Krishna response:', error);
            return '‡§µ‡§§‡•ç‡§∏, ‡§•‡•ã‡§°‡§º‡•Ä ‡§¶‡•á‡§∞ ‡§Æ‡•á‡§Ç ‡§´‡§ø‡§∞ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à‡•§';
        }
    }
    
    // Process text queries (for testing and API endpoints)
    async processTextQuery(question, sessionId) {
        try {
            const session = sessionManager.sessions.get(sessionId);
            if (!session) {
                throw new Error('Session not found');
            }
            
            console.log(`Processing text query: ${question}`);
            
            // Use enhanced semantic search
            const relevantVerses = await this.knowledgeBase.findRelevantVerses(question, 2);
            
            // Generate response
            const krishnaResponse = await this.generateKrishnaResponse(question, relevantVerses, session);
            
            // Update session
            session.conversationHistory.push({
                timestamp: Date.now(),
                userQuestion: question,
                krishnaResponse: krishnaResponse,
                versesUsed: relevantVerses ? relevantVerses.map(v => v.id) : [],
                type: 'text'
            });
            
            return {
                response: krishnaResponse,
                versesUsed: relevantVerses || [],
                searchMetrics: {
                    queryProcessed: true,
                    versesFound: relevantVerses ? relevantVerses.length : 0,
                    searchType: 'semantic'
                }
            };
            
        } catch (error) {
            console.error('Error processing text query:', error);
            throw error;
        }
    }
    
    cancelActiveRequests(sessionId) {
        for (const [requestId, controller] of this.activeRequests.entries()) {
            if (requestId.includes(sessionId)) {
                controller.abort();
                this.activeRequests.delete(requestId);
            }
        }
        console.log(`Cancelled active requests for session: ${sessionId}`);
    }
}

// Initialize components
let knowledgeBase;
let sessionManager;
let speechProcessor;

// Initialize everything asynchronously
async function initializeServer() {
    try {
        console.log('üöÄ Initializing Paarth - Krishna AI Voice Assistant...');
        
        // Validate environment variables first
        if (!process.env.GEMINI_API_KEY) {
            throw new Error('GEMINI_API_KEY not found in environment variables');
        }
        
        // Initialize Gemini AI
        genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        
        // Initialize enhanced knowledge base with semantic search
        knowledgeBase = new EnhancedKrishnaKnowledgeBase(process.env.GEMINI_API_KEY);
        await knowledgeBase.initialize();
        
        // Initialize other components
        sessionManager = new KrishnaSessionManager();
        speechProcessor = new KrishnaSpeechProcessor(knowledgeBase);
        
        console.log('‚úÖ All components initialized successfully');
        
    } catch (error) {
        console.error('‚ùå Error initializing server:', error);
        process.exit(1);
    }
}

// Health check endpoint (should be early in the middleware chain)
app.get('/health', (req, res) => {
    const stats = knowledgeBase ? knowledgeBase.getStats() : { status: 'initializing' };
    const activeSessions = sessionManager ? sessionManager.sessions.size : 0;
    
    res.json({ 
        status: 'OK',
        service: 'Paarth - Krishna AI Voice Assistant (Enhanced)',
        version: '2.0.0',
        timestamp: new Date().toISOString(),
        activeSessions: activeSessions,
        knowledgeBase: stats,
        features: {
            semanticSearch: true,
            embeddings: true,
            advancedSearch: true,
            multilingualSupport: true
        }
    });
});

// Root endpoint
app.get('/', (req, res) => {
    res.json({
        message: '‡§™‡§æ‡§∞‡•ç‡§• - Krishna AI Voice Assistant',
        version: '2.0.0',
        endpoints: {
            websocket: '/ws',
            health: '/health',
            api: '/api/krishna/*'
        }
    });
});

// WebSocket connection handling
wss.on('connection', (ws, req) => {
    console.log(`Paarth client connected from ${req.socket.remoteAddress}`);
    
    const session = sessionManager.createSession(ws);
    
    // Send Krishna's greeting with knowledge base stats
    const stats = knowledgeBase ? knowledgeBase.getStats() : {};
    ws.send(JSON.stringify({
        type: 'connection_established',
        message: '‡§™‡§æ‡§∞‡•ç‡§•, ‡§Æ‡•à‡§Ç ‡§ï‡•É‡§∑‡•ç‡§£ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§',
        sessionId: session.id,
        knowledgeBaseStats: stats
    }));
    
    ws.on('message', async (message) => {
        try {
            let data;
            try {
                data = JSON.parse(message);
            } catch (parseError) {
                console.error('Invalid JSON received:', parseError);
                ws.send(JSON.stringify({
                    type: 'error',
                    message: 'Invalid message format'
                }));
                return;
            }
            
            const session = sessionManager.getSession(ws);
            
            if (!session) {
                ws.send(JSON.stringify({
                    type: 'error',
                    message: 'Session not found'
                }));
                return;
            }
            
            sessionManager.updateActivity(session.id);
            
            switch (data.type) {
                case 'audio_data':
                    try {
                        if (!data.audio) {
                            throw new Error('No audio data provided');
                        }
                        
                        console.log(`Processing Krishna audio for session: ${session.id}`);
                        
                        const startTime = Date.now();
                        const result = await speechProcessor.processAudio(data.audio, session.id);
                        const processingTime = Date.now() - startTime;
                        
                        console.log(`Krishna responded in ${processingTime}ms`);
                        
                        ws.send(JSON.stringify({
                            type: 'text_response',
                            text: result.response,
                            transcription: result.transcription,
                            versesUsed: result.versesUsed,
                            processingTime: processingTime,
                            sessionId: session.id,
                            speaker: 'krishna'
                        }));
                        
                    } catch (error) {
                        console.error('Error processing Krishna audio:', error);
                        ws.send(JSON.stringify({
                            type: 'error',
                            message: '‡§µ‡§§‡•ç‡§∏, ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§¨‡•ã‡§≤‡§ï‡§∞ ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§'
                        }));
                    }
                    break;
                    
                case 'text_query':
                    try {
                        if (!data.query) {
                            throw new Error('No query provided');
                        }
                        
                        console.log(`Processing text query for session: ${session.id}`);
                        
                        const startTime = Date.now();
                        const result = await speechProcessor.processTextQuery(data.query, session.id);
                        const processingTime = Date.now() - startTime;
                        
                        ws.send(JSON.stringify({
                            type: 'text_response',
                            text: result.response,
                            versesUsed: result.versesUsed,
                            searchMetrics: result.searchMetrics,
                            processingTime: processingTime,
                            sessionId: session.id,
                            speaker: 'krishna'
                        }));
                        
                    } catch (error) {
                        console.error('Error processing text query:', error);
                        ws.send(JSON.stringify({
                            type: 'error',
                            message: '‡§µ‡§§‡•ç‡§∏, ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§'
                        }));
                    }
                    break;
                    
                case 'get_random_verse':
                    try {
                        const randomVerse = knowledgeBase.getRandomVerse();
                        
                        ws.send(JSON.stringify({
                            type: 'random_verse',
                            verse: randomVerse,
                            sessionId: session.id
                        }));
                        
                    } catch (error) {
                        console.error('Error getting random verse:', error);
                        ws.send(JSON.stringify({
                            type: 'error',
                            message: '‡§∂‡•ç‡§≤‡•ã‡§ï ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡•§'
                        }));
                    }
                    break;
                    
                case 'advanced_search':
                    try {
                        const results = await knowledgeBase.advancedSearch(data.options);
                        
                        ws.send(JSON.stringify({
                            type: 'search_results',
                            results: results,
                            searchOptions: data.options,
                            sessionId: session.id
                        }));
                        
                    } catch (error) {
                        console.error('Error in advanced search:', error);
                        ws.send(JSON.stringify({
                            type: 'error',
                            message: '‡§ñ‡•ã‡§ú ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à‡•§'
                        }));
                    }
                    break;
                    
                case 'ping':
                    ws.send(JSON.stringify({
                        type: 'pong',
                        timestamp: Date.now()
                    }));
                    break;
                    
                default:
                    ws.send(JSON.stringify({
                        type: 'error',
                        message: '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞',
                        sessionId: session.id
                    }));
            }
        } catch (error) {
            console.error('Error handling WebSocket message:', error);
            ws.send(JSON.stringify({
                type: 'error',
                message: '‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø'
            }));
        }
    });
    
    ws.on('pong', () => {
        const session = sessionManager.getSession(ws);
        if (session) {
            sessionManager.updateActivity(session.id);
        }
    });
    
    ws.on('close', () => {
        const session = sessionManager.getSession(ws);
        if (session) {
            speechProcessor.cancelActiveRequests(session.id);
            
            const sessionDuration = Date.now() - session.startTime;
            console.log(`Krishna session ended: ${session.id}, Duration: ${Math.round(sessionDuration/1000)}s, Questions: ${session.conversationHistory.length}`);
        }
        
        sessionManager.removeSession(ws);
    });
    
    ws.on('error', (error) => {
        console.error('WebSocket error:', error);
        const session = sessionManager.getSession(ws);
        if (session) {
            speechProcessor.cancelActiveRequests(session.id);
        }
    });
});

// Enhanced API endpoints
app.get('/api/krishna/verses', async (req, res) => {
    try {
        const { chapter, random, limit = 10 } = req.query;
        
        if (random === 'true') {
            const verse = knowledgeBase.getRandomVerse();
            return res.json({ verse });
        }
        
        if (chapter) {
            const verses = knowledgeBase.getVersesByChapter(parseInt(chapter));
            return res.json({ verses: verses.slice(0, limit) });
        }
        
        // Return all verses with limit
        const allVerses = knowledgeBase.verses.slice(0, parseInt(limit));
        res.json({ verses: allVerses, total: knowledgeBase.verses.length });
        
    } catch (error) {
        res.status(500).json({ error: 'Error fetching verses', message: error.message });
    }
});

app.post('/api/krishna/search', async (req, res) => {
    try {
        const { query, maxResults = 3 } = req.body;
        
        if (!query) {
            return res.json({ verses: [], message: 'No query provided' });
        }
        
        const startTime = Date.now();
        const relevantVerses = await knowledgeBase.findRelevantVerses(query, parseInt(maxResults));
        const searchTime = Date.now() - startTime;
        
        res.json({ 
            query: query,
            verses: relevantVerses,
            count: relevantVerses.length,
            searchTime: searchTime,
            searchType: 'semantic_embedding'
        });
        
    } catch (error) {
        res.status(500).json({ error: 'Search failed', message: error.message });
    }
});

app.post('/api/krishna/advanced-search', async (req, res) => {
    try {
        const searchOptions = req.body;
        
        const startTime = Date.now();
        const results = await knowledgeBase.advancedSearch(searchOptions);
        const searchTime = Date.now() - startTime;
        
        res.json({
            results: results,
            searchOptions: searchOptions,
            count: results.length,
            searchTime: searchTime
        });
        
    } catch (error) {
        res.status(500).json({ error: 'Advanced search failed', message: error.message });
    }
});

app.post('/api/krishna/ask', async (req, res) => {
    try {
        const { question, sessionId } = req.body;
        
        if (!question) {
            return res.status(400).json({ error: 'Question is required' });
        }
        
        // Create temporary session if not provided
        let session;
        if (sessionId && sessionManager.sessions.has(sessionId)) {
            session = sessionManager.sessions.get(sessionId);
        } else {
            session = {
                id: `temp_${Date.now()}`,
                conversationHistory: []
            };
        }
        
        const result = await speechProcessor.processTextQuery(question, session.id);
        
        res.json({
            question: question,
            response: result.response,
            versesUsed: result.versesUsed,
            searchMetrics: result.searchMetrics,
            sessionId: session.id
        });
        
    } catch (error) {
        res.status(500).json({ error: 'Failed to process question', message: error.message });
    }
});

// Knowledge base management endpoints
app.get('/api/krishna/stats', (req, res) => {
    const stats = knowledgeBase ? knowledgeBase.getStats() : {};
    const activeSessions = sessionManager ? sessionManager.sessions.size : 0;
    const totalConversations = sessionManager ? Array.from(sessionManager.sessions.values())
        .reduce((sum, s) => sum + s.conversationHistory.length, 0) : 0;
    
    res.json({ 
        knowledgeBase: stats,
        server: {
            activeSessions: activeSessions,
            totalConversations: totalConversations,
            uptime: process.uptime()
        }
    });
});

// Session analytics
app.get('/api/krishna/sessions', (req, res) => {
    if (!sessionManager) {
        return res.status(503).json({ error: 'Server not fully initialized' });
    }
    
    const sessions = Array.from(sessionManager.sessions.entries()).map(([id, session]) => ({
        id: id,
        duration: Date.now() - session.startTime,
        lastActivity: session.lastActivity,
        questionCount: session.conversationHistory.length,
        devotionalLevel: session.devotionalLevel
    }));
    
    res.json({ sessions });
});

// Cleanup inactive sessions
setInterval(() => {
    if (!sessionManager) return;
    
    const now = Date.now();
    const timeoutMs = 20 * 60 * 1000; // 20 minutes timeout
    
    for (const [sessionId, session] of sessionManager.sessions.entries()) {
        if (now - session.lastActivity > timeoutMs) {
            console.log(`Cleaning up inactive Krishna session: ${sessionId}`);
            if (speechProcessor) {
                speechProcessor.cancelActiveRequests(sessionId);
            }
            sessionManager.sessions.delete(sessionId);
            
            if (session.ws && session.ws.readyState === WebSocket.OPEN) {
                session.ws.close();
            }
        }
    }
}, 5 * 60 * 1000); // Check every 5 minutes

// Error handling middleware
app.use((error, req, res, next) => {
    console.error('Server error:', error);
    res.status(500).json({
        error: '‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à',
        message: error.message
    });
});

// 404 handler
app.use('*', (req, res) => {
    res.status(404).json({
        error: '‡§™‡§• ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ',
        message: '‡§Ø‡§π URL ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à'
    });
});

// Environment variables with defaults for Fly.io
const PORT = process.env.PORT || 8080;
const HOST = '0.0.0.0'; // Always bind to 0.0.0.0 for Fly.io

// Start server after initialization
initializeServer().then(() => {
    server.listen(PORT, HOST, () => {
        console.log(`ü™∂ ‡§™‡§æ‡§∞‡•ç‡§• - Krishna AI Voice Assistant (Enhanced)`);
        console.log(`üåê Server running on http://${HOST}:${PORT}`);
        console.log(`üöÅ Fly.io deployment ready on port ${PORT}`);
        
        if (knowledgeBase) {
            const stats = knowledgeBase.getStats();
            console.log(`üìø ${stats.totalVerses || 0} Gita verses loaded with semantic search`);
            console.log(`üß† ${stats.versesWithEmbeddings || 0} verses with embeddings`);
        }
        
        console.log(`üïâÔ∏è  Ready to serve divine wisdom with AI-powered relevance`);
        
        // Validate required environment variables
        if (!process.env.GEMINI_API_KEY) {
            console.error('‚ùå GEMINI_API_KEY not found in environment variables');
            console.log('üìù Please add GEMINI_API_KEY to your .env file or Fly.io secrets');
        } else {
            console.log('‚úÖ Gemini AI configured for embeddings and responses');
        }
        
        console.log(`üîß Environment: ${process.env.NODE_ENV || 'development'}`);
    });
}).catch(error => {
    console.error('‚ùå Failed to initialize server:', error);
    process.exit(1);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üôè Krishna assistant shutting down gracefully...');
    
    // Close all WebSocket connections
    if (sessionManager) {
        for (const [sessionId, session] of sessionManager.sessions.entries()) {
            if (speechProcessor) {
                speechProcessor.cancelActiveRequests(sessionId);
            }
            if (session.ws && session.ws.readyState === WebSocket.OPEN) {
                session.ws.send(JSON.stringify({
                    type: 'server_shutdown',
                    message: '‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§'
                }));
                session.ws.close();
            }
        }
    }
    
    server.close(() => {
        console.log('‚úÖ Server closed');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('üôè Krishna assistant received SIGINT, shutting down gracefully...');
    process.emit('SIGTERM');
});

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    process.exit(1);
});

module.exports = {
    app,
    server,
    knowledgeBase,
    sessionManager,
    speechProcessor
};